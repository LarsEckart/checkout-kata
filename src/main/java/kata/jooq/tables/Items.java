/*
 * This file is generated by jOOQ.
 */
package kata.jooq.tables;


import java.util.Collection;

import kata.jooq.DefaultSchema;
import kata.jooq.tables.records.ItemsRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Items extends TableImpl<ItemsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>Items</code>
     */
    public static final Items ITEMS = new Items();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ItemsRecord> getRecordType() {
        return ItemsRecord.class;
    }

    /**
     * The column <code>Items.sku</code>.
     */
    public final TableField<ItemsRecord, String> SKU = createField(DSL.name("sku"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>Items.price</code>.
     */
    public final TableField<ItemsRecord, Integer> PRICE = createField(DSL.name("price"), SQLDataType.INTEGER, this, "");

    private Items(Name alias, Table<ItemsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Items(Name alias, Table<ItemsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>Items</code> table reference
     */
    public Items(String alias) {
        this(DSL.name(alias), ITEMS);
    }

    /**
     * Create an aliased <code>Items</code> table reference
     */
    public Items(Name alias) {
        this(alias, ITEMS);
    }

    /**
     * Create a <code>Items</code> table reference
     */
    public Items() {
        this(DSL.name("Items"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Items as(String alias) {
        return new Items(DSL.name(alias), this);
    }

    @Override
    public Items as(Name alias) {
        return new Items(alias, this);
    }

    @Override
    public Items as(Table<?> alias) {
        return new Items(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Items rename(String name) {
        return new Items(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Items rename(Name name) {
        return new Items(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Items rename(Table<?> name) {
        return new Items(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Items where(Condition condition) {
        return new Items(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Items where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Items where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Items where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Items where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Items where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Items where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Items where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Items whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Items whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
